// * Generic helper functions

/**
 * Generates a URL string containing all node data, to be used to restore 'sessions'
 * @returns {string} generated URL
 */
 function createUrl() {
  // start with route and 'count' parameter
  updateNodeBuffer()
  let url = "/placeholder?count="+nodeBuffer.length;

  let id = 0;
  nodeBuffer.forEach(pair => {
    // for every pair, append GET parameters.
    url += `&${id}_title=${pair[0]}&${id}_content=${pair[1]}`
    id++
  })

  return url;
}

/**
 * Updates value of url holder with url generated by createUrl
 */
 function updateUrlDisplay() {
  urlDisplay.value = createUrl();
}

/**
 * Updates nodeBuffer with current node titles and bodies
 */
 function updateNodeBuffer() {
  // reset buffer
  nodeBuffer = [];

  // for every node
  for (let i = 0; i < nodeCount; i++) {
    const child = holder.children[i];
    // push title and content
    nodeBuffer.push([child.children[1].value, child.children[3].value]);
  }
}

/**
 * Deletes node with given id
 * @param {Number} id - id of node
 */
 function deleteNode(id) {
  nodeCount--;
  // loop through all children of holder
  for (let i = 0; i < holder.children.length; i++) {
    const child = holder.children[i];
    // if ids match, remove node
    if (child.id == id) {
      child.remove();
    }
  }
  updateUrlDisplay()
}